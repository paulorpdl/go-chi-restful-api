

trigger:
- master

pool:
  vmImage: ubuntu-latest

parameters:
  - name: "containerRepository"
    type: "string"
    default: "continuous-delivery/post-service"
  - name: "containerRegistryName"
    type: "string"
    default: "paulorpdl.azurecr.io"
  - name: "dockerRegistryServiceConnection"
    type: "string"
    default: "paulorpdl-container-registry"
  - name: "azureSubscriptionServiceConnection"
    type: "string"
    default: "paulorpdl-azure-subscription"
  - name: "azureAppName"
    type: "string"
    default: "post-service"
  - name: "resourceGroupName"
    type: "string"
    default: "Continuous-Delivery"
  

variables:
  CGO_ENABLED: '0' # Evitar linkeado de librerias del OS, para crear un binario funcional para Scratch Container
  GOOS: 'linux'
  GOARCH:  'amd64'
  tag: "latest"

steps: 
  - bash: | 
      HASH=$(git describe --match 'v[0-9]*' --dirty='.m' --always --tags)
      echo "##vso[task.setvariable variable=tag;]$HASH"
    displayName: "Get commit id for tagging"
  - task: GoTool@0
    inputs:
      version: '1.16.13'
    displayName: "Setup Golang env"
  - task: Go@0
    inputs:
      command: 'get' 
      arguments: '-d'
      workingDirectory: '$(System.DefaultWorkingDirectory)'
    displayName: "Get Dependencies"
  - task: Go@0
    inputs:
      command: 'test'
      arguments: "-v ./..."
      workingDirectory: '$(System.DefaultWorkingDirectory)'
    displayName: "Test application"
  - task: Go@0
    inputs:
      command: 'build'
      arguments: '-a -o _output/app'
      workingDirectory: '$(System.DefaultWorkingDirectory)'
    displayName: "Build application"
  - task: Docker@2
    inputs:
      command: buildAndPush
      repository: ${{ parameters.containerRepository }}
      containerRegistry: ${{ parameters.dockerRegistryServiceConnection}}
      Dockerfile: "**/Containerfile"
      tags: | 
        latest
        $(tag)
    displayName: "Build and Push Docker Image"
  - task: AzureWebAppContainer@1
    inputs:
      azureSubscription: ${{ parameters.azureSubscriptionServiceConnection }}
      appName: ${{ parameters.azureAppName }}
      resourceGroupName: ${{ parameters.resourceGroupName }}
      containers: ${{ parameters.containerRegistryName}}/${{ parameters.containerRepository }}:$(variables.tag)
    displayName: "Deploy to Azure App Service"
      